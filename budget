#!/usr/bin/env ruby

=begin
Example schema:

---
# A bill for comcast on the 5th of the month for $100
- name: comcast
  when: 5
  amount: 100
# Payday on the 1st and 15th, for $1000
- name: payday
  type: income
  when:
  - 1
  - 15
  amount: 1000
# A bill for $200/mo on the 5th of each month starting in January 2016
- name: Annoying bill
  when: 5
  starts: 2016/01/01
# A bill that will stop being withdrawn after November 30th, 2015
- name: Another bill
  when: 10
  ends: 2015/11/30
---

Schema reference:
* name: any string to refer to this item in the output
* type: set to 'income' to invert amount (gain rather than loss)
* when: day(s) of month where item takes effect. Takes an integer or array of
    integers. Items that fall past the end of the month (e.g. 30th of February)
    will be executed on the last real day of that month
* amount: dollar amount for this item
* starts: optional start date as YYYY/MM/DD, item will only be processed after
    this date
* ends: optional end date as YYYY/MM/DD, item will only be processed until this
    date

=end

require 'yaml'
require 'date'
require 'cymbal'

##
# Add .subset to Hash for selecting a subhash
class Hash
  def subset(*keys)
    select { |k| keys.include? k }
  end
end

def add_action(calendar, action, date)
  amount = action[:amount]
  amount *= -1 unless action[:type] == 'income'
  action = action.subset(:name, :starts, :ends)
  calendar[date] << action.merge(amount: amount)
end

def write_line(date, value, change, name)
  args = [date, value.to_s.rjust(10), change.to_s.rjust(10), name]
  puts args.join(' | ')
end

def get_days(date)
  return [date.day] if date.month == date.next.month
  date.day.upto(date.day + 3).to_a
end

def out_of_bounds?(action, day)
  if action[:starts] && Date.parse(action[:starts]) > day
    true
  elsif action[:ends] && Date.parse(action[:ends]) < day
    true
  else
    false
  end
end

def parse_day(value, date, calendar)
  get_days(date).each do |day|
    calendar[day].each do |action|
      next if out_of_bounds?(action, date)
      value += action[:amount]
      write_line(date, value, action[:amount], action[:name])
    end
  end
  value
end

activity_file = ARGV.shift
value = (ARGV.shift || 0).to_i
months = (ARGV.shift || 6).to_i

ACTIONS = Cymbal.symbolize(File.open(activity_file) { |fh| YAML.load fh })

CALENDAR = Hash.new { |h, k| h[k] = [] }

ACTIONS.each_with_object(CALENDAR) do |action, calendar|
  dates = action[:when]
  dates = [dates] unless dates.is_a? Array
  dates.each { |date| add_action(calendar, action, date) }
end

start = Date.today + 1
finish = start >> months
write_line(start, value, 0, 'initial value')
start.upto(finish).each { |date| value = parse_day(value, date, CALENDAR) }
