#!/usr/bin/env ruby

require 'io/console'

def help
  puts 'Usage: bumpdep updated-gem-name new.version'
  puts 'Example: bumpdep timecop 0.22.100'
  exit 1
end

gem = ARGV.shift || help
version = ARGV.shift || help
help unless gem.match(/^\S+$/) && version.match(/^[\d.]+$/)

gems = Dir.glob('**/*.gemspec').select do |x|
  Dir.exist?(File.dirname(x) + '/.git')
end

def try_update(gemspec, current, gem, version, old_version)
  return if old_version == version
  clean = Dir.chdir(File.dirname(gemspec)) do
    `git status`.match(/working directory clean/)
  end
  if clean
    update_dep(gemspec, current, gem, version, old_version)
  else
    puts "Git repo for #{gem} is not clean"
  end
end

def update_dep(gemspec, current, gem, version, old_version)
  print "Want to update #{gem} from #{old_version} to #{version} " \
    "in #{File.basename(gemspec, '.gemspec')}? [Y/n] "
  return if gets.chomp.downcase == 'n'
  current.map! do |x|
    x.sub(/(?<=_dependency '#{gem}', '~> )[\d.]+(?=')/, version)
  end
  File.open(gemspec, 'w') { |fh| fh.write(current.join) }
  update_repo(gemspec, gem, version)
end

def update_repo(gemspec, gem, version)
  Dir.chdir(File.dirname(gemspec)) do
    system('git', 'add', File.basename(gemspec)) || fail('Failed to add file')
    message = "Updated version of #{gem} to #{version}"
    system('git', 'commit', '-m', message) || fail('Failed to commit change')
    system('git', 'push', 'origin', 'master') || fail('Failed to push change')
  end
rescue
  puts "Failed to update #{gem}"
end

gems.each do |gemspec|
  current = File.readlines(gemspec)
  if current.find { |x| x.match(/_dependency '#{gem}', '~> ([\d.]+)'/) }
    try_update(gemspec, current, gem, version, $1)
  else
    puts "No match in #{File.basename(gemspec, '.gemspec')}"
  end
end
