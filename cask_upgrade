#!/usr/bin/env ruby

require 'optparse'

CACHE_DIR = [
  ENV['HOMEBREW_CACHE'],
  File.expand_path('~/Library/Caches/Homebrew'),
  '/Library/Caches/Homebrew'
].find { |x| x && File.exist?(x) }

def get_hash(path)
  `shasum #{path}`.split.first
end

def current_version(cask_name)
  version = Dir.new("/opt/homebrew-cask/Caskroom/#{cask_name}").to_a.last
  version == 'latest' ? check_latest(cask_name) : version
end

def check_latest(cask_name)
  path = Dir.glob("#{CACHE_DIR}/#{cask_name}-latest*").first
  return 'not-latest' unless path
  current_hash = get_hash path
  `brew cask fetch --force #{cask_name}`
  new_hash = get_hash path
  current_hash == new_hash ? 'latest' : 'not-latest'
end

def latest_version(cask_name)
  `brew cask info #{cask_name}`.split[1]
end

def upgrade(cask)
  puts "Upgrading #{cask.name} from #{cask.current} to #{cask.latest}"
  system 'brew', 'cask', 'uninstall', '--force', cask.name
  system 'brew', 'cask', 'install', cask.name
end

def noop(cask)
  puts "Would upgrade #{cask.name} from #{cask.current} to #{cask.latest}"
end

def list_casks
  `brew cask list -1`.split("\n").reject { |x| x.match('(!)') }
end

options = {}
OptionParser.new do |opts|
  opts.banner = 'Usage: cask_upgrade [-n|--noop] [cask_name]'
  opts.on('-n', '--noop', 'Do not perform upgrade(s)') do
    options[:noop] = true
  end
end.parse!

cask_names = ARGV.empty? ? list_casks : ARGV

Cask = Struct.new :name, :current, :latest

Casks = cask_names.map do |cask_name|
  Cask.new(
    cask_name,
    current_version(cask_name),
    latest_version(cask_name)
  )
end

puts "Found #{Casks.size} casks"

Casks.each do |cask|
  if cask.current != cask.latest
    options[:noop] ? noop(cask) : upgrade(cask)
  end
end
