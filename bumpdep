#!/usr/bin/env ruby

def help
  puts 'Usage: bumpdep updated-gem-name new.version [noconfirm]'
  puts 'Example: bumpdep timecop 0.22.100'
  exit 1
end

def repo_name
  File.basename(Dir.pwd)
end

def run(cmd, fail_msg)
  system("#{cmd} >/dev/null 2>&1") || fail(fail_msg)
end

def git_commit!
  message = "Updated version of #{GEM} to #{NEW_VERSION}"
  run "git commit -am '#{message}'", 'Failed to commit change'
  run 'git push origin master', 'Failed to push change'
rescue
  puts "Failed to update #{repo_name}"
end

def update_bundle!
  return unless system('git cat-file -e HEAD:Gemfile.lock &>/dev/null')
  run 'bundle update', 'Failed to update bundle'
end

def replace_version!(file, contents)
  puts "Updating #{repo_name} to #{NEW_VERSION}"
  contents.map! { |x| x.sub(REGEX, NEW_VERSION) }
  File.open(file, 'w') { |fh| fh.write(contents.join) }
  true
end

def confirm?(file, old_version)
  print "Want to update #{repo_name}'s #{file} from #{old_version}? [Y/n] "
  gets.chomp.downcase != 'n'
end

def load_file(file)
  return unless file && File.exist?(file)
  contents = File.readlines(file)
  contents.find { |x| x.match(REGEX) }
  old_version = Regexp.last_match(0)
  [contents, old_version]
end

def update_file!(file)
  contents, old_version = load_file(file)
  return unless old_version && old_version != NEW_VERSION
  ok = NOCONFIRM || confirm?(file, old_version)
  replace_version!(file, contents) if ok
end

def repo_clean?
  res = `git status 2>&1`.match(/working directory clean/)
  puts "Git repo not clean: #{repo_name}" unless res
  res
end

def update_repo!(repo)
  Dir.chdir(repo) do
    next unless repo_clean?
    res = ['Gemfile', "#{repo_name}.gemspec"].map { |x| update_file! x }
    next unless res.any?
    update_bundle!
    git_commit!
  end
end

def all_repos
  Dir.glob('**/Gemfile').map { |x| File.dirname(x) }.select do |x|
    Dir.exist? File.join(x, '.git')
  end
end

GEM = ARGV.shift || help
REGEX = /(?<= '#{GEM}', '~> )[\w.]+(?=')/
NEW_VERSION = ARGV.shift || help
NOCONFIRM = ARGV.shift || nil
help unless GEM.match(/^\S+$/) && NEW_VERSION.match(/^[\w.]+$/)

all_repos.each { |x| update_repo! x }
