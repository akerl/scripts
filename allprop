#!/usr/bin/env ruby

require 'parallel'
require 'mercenary'
require 'prospectus'

##
# Runner class to check prospectuses
class Runner
  def initialize(params)
    @options = params
    @options[:dir] ||= File.expand_path('~/src')
    @options[:maxdepth] ||= 2
  end

  def run!
    results = Parallel.map(all_dirs) { |x| [x, worker(x)] }
    failures = (results.group_by(&:last)[false] || []).map(&:first)
    cache_failures(failures)
  end

  private

  def cache_file
    @cache_file ||= File.join(@options[:dir], '.allprop')
  end

  def all_files
    @all_files ||= Dir.glob(
      @options[:dir] + '/*' * @options[:maxdepth] + '/.prospectus*'
    )
  end

  def load_cache
    return nil unless @options[:cache] && File.exist?(cache_file)
    File.read(cache_file).split "\n"
  end

  def all_dirs
    @all_dirs ||= load_cache || all_files.map { |x| File.dirname(x) }
  end

  def worker(dir)
    Dir.chdir(dir) do
      Prospectus.load.each { |x| puts "#{x.name}: #{x.actual} / #{x.expected}" }
    end
  rescue Exception # rubocop:disable Lint/RescueException
    puts "Failed to load #{dir}"
  end

  def cache_failures(failures)
    File.open(cache_file, 'w') { |fh| fh << failures.join("\n") }
  end
end

Mercenary.program(:allprop) do |p|
  p.description 'Run prospectus against all subdirs'
  p.syntax 'allprop [options]'

  # rubocop:disable Metrics/LineLength
  p.option :cache, '-c', '--cache', 'Use cache to check only fails from last time'
  p.option :dir, '-d DIR', '--dir', 'Root dir (defaults to ~/src)'
  p.option :maxdepth, '-m DEPTH', '--maxdepth', 'Max depth to search'
  # rubocop:enable Metrics/LineLength

  p.action do |_, options|
    Runner.new(options).run!
  end
end
