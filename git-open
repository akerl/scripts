#!/bin/bash

# The MIT License (MIT)
# 
# Copyright (c) <year> <copyright holders>
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# Opens the github page for a repo/branch in your browser.
# https://github.com/paulirish/git-open/
#
# git open
# git open [remote] [branch]


# are we in a git repo?
git rev-parse --is-inside-work-tree &>/dev/null

if [[ $? != 0 ]]
then
    echo "Not a git repository."
    exit 1
fi


# assume origin if not provided
# fallback to upstream if neither is present.
remote="origin"
if [ ! -z "$1" ]
then
    remote="$1"
fi

remote_url="remote.${remote}.url"

giturl=$(git config --get $remote_url)
if [ -z "$giturl" ]
then
    echo "$remote_url not set."
    exit 1
fi


# URL normalization
# Github support
if grep -q github <<<$giturl; then
    giturl=${giturl/git\@github\.com\:/https://github.com/}
    providerUrlDifference=tree
# bitbucket support
elif grep -q bitbucket <<<$giturl; then
    giturl=${giturl/git\@bitbucket\.org\:/https://bitbucket.org/}
    providerUrlDifference=branch
fi
giturl=${giturl%\.git}


# get current branch
if [ -z "$2" ]
then
    branch=`git symbolic-ref -q --short HEAD`
else
    branch="$2"
fi

if [ ! -z "$branch" ]
then
    giturl="${giturl}/${providerUrlDifference}/${branch}"
fi

# simplify URL for master
giturl=${giturl/tree\/master/}

# get current open browser command
if [ $(uname -s) == "Darwin" ]
then
  open=open
else
  open=xdg-open
fi

# open it in a browser
$open $giturl &> /dev/null
exit 0

