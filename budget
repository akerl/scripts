#!/usr/bin/env ruby

require 'yaml'
require 'date'
require 'cymbal'

##
# Add .subset to Hash for selecting a subhash
class Hash
  def subset(*keys)
    select { |k| keys.include? k }
  end
end

def add_action(calendar, action, date)
  amount = action[:amount]
  amount *= -1 unless action[:type] == 'income'
  action = action.subset(:name, :starts, :ends)
  calendar[date] << action.merge(amount: amount)
end

def write_line(date, value, change, name)
  args = [date, value.to_s.rjust(10), change.to_s.rjust(10), name]
  puts args.join(' | ')
end

def get_days(date)
  return [date.day] if date.month == date.next.month
  date.day.upto(date.day + 3).to_a
end

def out_of_bounds?(action, day)
  if action[:starts] && Date.parse(action[:starts]) > day
    true
  elsif action[:ends] && Date.parse(action[:ends]) < day
    true
  else
    false
  end
end

def parse_day(value, date, calendar)
  get_days(date).each do |day|
    calendar[day].each do |action|
      next if out_of_bounds?(action, date)
      value += action[:amount]
      write_line(date, value, action[:amount], action[:name])
    end
  end
  value
end

activity_file = ARGV.shift
value = (ARGV.shift || 0).to_i
months = (ARGV.shift || 6).to_i

ACTIONS = Cymbal.symbolize(File.open(activity_file) { |fh| YAML.load fh })

CALENDAR = Hash.new { |h, k| h[k] = [] }

ACTIONS.each_with_object(CALENDAR) do |action, calendar|
  dates = action[:when]
  dates = [dates] unless dates.is_a? Array
  dates.each { |date| add_action(calendar, action, date) }
end

start = Date.today
finish = start >> months
write_line(start, value, 0, 'initial value')
start.upto(finish).each { |date| value = parse_day(value, date, CALENDAR) }
